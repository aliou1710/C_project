struct TTree* pTree = CreateTree(GetPtr, LessPtr) ...
ShowTree -> IsEmptyTree(pTree) : 1, SizeOfTree(pTree) : 0

InsertInRandomOrder(pTree, 20) ...
ShowTree -> IsEmptyTree(pTree) : 0, SizeOfTree(pTree) : 20
(06,95) (0d,16) (24,82) (29,67) (3e,53) (43,99) (47,26) (49,45) (4d,12) (52,64) (87,04) (8b,94) (b3,42) (b3,38) (be,00) (d6,58) (db,36) (e1,24) (e9,91) (f1,27) 
ShowInverseTree -> IsEmptyTree(pTree) : 0, SizeOfTree(pTree) : 20
(f1,27) (e9,91) (e1,24) (db,36) (d6,58) (be,00) (b3,38) (b3,42) (8b,94) (87,04) (52,64) (4d,12) (49,45) (47,26) (43,99) (3e,53) (29,67) (24,82) (0d,16) (06,95) 
Number of key 00000006 :  1 	Number of key 0000000D :  1 	Number of key 00000024 :  1 	Number of key 00000029 :  1 	Number of key 0000003E :  1 	Number of key 00000043 :  1 	Number of key 00000047 :  1 	Number of key 00000049 :  1 	Number of key 0000004D :  1 	Number of key 00000052 :  1 	Number of key 00000087 :  1 	Number of key 0000008B :  1 	Number of key 000000B3 :  2 	Number of key 000000BE :  1 	Number of key 000000D6 :  1 	Number of key 000000DB :  1 	Number of key 000000E1 :  1 	Number of key 000000E9 :  1 	Number of key 000000F1 :  1 	
__ShowPrefixTree -> be 49 29 0d 06 * * 24 * * 43 3e * * 47 * * 87 52 4d * * * b3 8b * * b3 * * e1 d6 * db * * f1 e9 * * * 
__ShowInfixTree -> * 06 * 0d * 24 * 29 * 3e * 43 * 47 * 49 * 4d * 52 * 87 * 8b * b3 * b3 * be * d6 * db * e1 * e9 * f1 * 
__ShowPostfixTree -> * * 06 * * 24 0d * * 3e * * 47 43 29 * * 4d * 52 * * 8b * * b3 b3 87 49 * * * db d6 * * e9 * f1 e1 be 
__ShowByLevels ->
                                                            (be,00)B                                                            
                            (49,45)B                                                        (e1,24)B                            
            (29,67)R                        (87,04)R                        (d6,58)B                        (f1,27)B            
    (0d,16)B        (43,99)B        (52,64)B        (b3,42)B           *            (db,36)R        (e9,91)R           *        
(06,95)R(24,82)R(3e,53)R(47,26)R(4d,12)R   *    (8b,94)R(b3,38)R   *       *       *       *       *       *       *       *    
WalkTree(pTree,ModifySizes) ...
ShowTree -> IsEmptyTree(pTree) : 0, SizeOfTree(pTree) : 20
(06,96) (0d,17) (24,83) (29,68) (3e,54) (43,100) (47,27) (49,46) (4d,13) (52,65) (87,05) (8b,95) (b3,43) (b3,39) (be,01) (d6,59) (db,37) (e1,25) (e9,92) (f1,28) 
EraseNodesFromBegin(pTree) ...
ShowTree -> IsEmptyTree(pTree) : 1, SizeOfTree(pTree) : 0

InsertInOrder(pTree, 80) ...
ShowTree -> IsEmptyTree(pTree) : 0, SizeOfTree(pTree) : 80
(00,11) (00,33) (04,68) (04,44) (04,57) (08,78) (0d,40) (10,05) (12,50) (13,93) (1d,44) (1d,26) (25,39) (25,04) (28,86) (29,24) (2c,73) (33,55) (36,50) (3a,91) (3e,83) (40,58) (40,88) (41,06) (43,00) (43,62) (46,37) (48,41) (4b,74) (4e,99) (54,38) (5a,83) (67,98) (67,24) (69,89) (69,95) (6c,87) (6c,03) (6d,58) (74,57) (7b,58) (82,55) (84,86) (85,69) (89,22) (8d,92) (8d,75) (91,61) (98,85) (98,26) (98,57) (99,69) (9a,89) (9b,68) (9b,25) (a0,60) (a5,87) (ae,05) (b1,14) (b2,71) (b6,53) (bb,21) (bd,81) (c8,39) (ca,10) (cf,68) (d6,14) (d7,34) (d7,72) (d9,87) (d9,18) (db,63) (e0,27) (e2,25) (e5,61) (e6,32) (ed,64) (f1,70) (f1,35) (f1,11) 
__ShowPostfixTree -> * * 00 * * 04 00 * * 04 * * 0d 08 04 * * 12 * * 1d 13 * * 25 * * 28 25 1d 10 * * 2c * * 36 33 * * 3e * * 40 40 3a * * 43 * * 46 43 * * 4b * * 54 4e 48 41 29 * * 67 * * 69 67 * * 6c * * 6d 6c 69 * * 7b * * 84 82 * * 89 * * 8d 8d 85 74 * * 98 * * 98 98 * * 9a * * 9b 9b 99 * * a5 * * b1 ae * * b6 * * bd bb b2 * * ca * * d6 cf * * d7 * * d9 d9 * * e0 * * e5 e2 * * ed * * * f1 f1 f1 e6 db d7 c8 a0 91 5a 
InsertInReverseOrder(pTree, 80) ...
ShowTree -> IsEmptyTree(pTree) : 0, SizeOfTree(pTree) : 160
(00,11) (00,33) (04,68) (04,44) (04,57) (08,78) (0b,75) (0b,65) (0c,05) (0d,40) (10,05) (11,48) (12,50) (13,93) (19,49) (1b,11) (1d,44) (1d,26) (1e,66) (25,39) (25,04) (25,85) (27,36) (28,86) (29,24) (2c,73) (2e,88) (2f,21) (33,55) (33,49) (36,50) (3a,91) (3b,15) (3e,83) (3e,87) (3e,63) (3e,03) (3f,18) (3f,01) (3f,32) (40,58) (40,88) (41,06) (42,44) (43,00) (43,62) (46,37) (47,46) (48,41) (4b,74) (4e,99) (53,75) (54,38) (54,32) (57,19) (58,40) (5a,83) (5e,03) (65,27) (67,98) (67,24) (68,01) (69,89) (69,95) (6c,87) (6c,03) (6d,58) (6d,61) (6d,67) (6d,29) (6d,13) (6d,01) (6e,97) (70,81) (70,29) (74,57) (75,44) (78,45) (7b,58) (7b,40) (7b,85) (7c,95) (82,55) (84,86) (84,73) (85,69) (85,52) (86,77) (87,42) (89,22) (8d,92) (8d,75) (8d,62) (8f,56) (91,61) (95,05) (95,50) (98,85) (98,26) (98,57) (99,69) (9a,89) (9b,68) (9b,25) (a0,60) (a5,87) (ad,54) (ae,05) (af,53) (b1,14) (b2,71) (b6,53) (ba,12) (bb,21) (bb,96) (bc,71) (bd,81) (c3,72) (c3,23) (c4,04) (c5,05) (c8,39) (ca,10) (cf,68) (d2,39) (d6,14) (d7,34) (d7,72) (d8,13) (d9,87) (d9,18) (db,63) (dc,24) (dc,63) (dd,53) (de,71) (e0,27) (e2,25) (e3,64) (e5,61) (e5,37) (e6,32) (e7,29) (e7,23) (e7,02) (e8,87) (e8,74) (ed,64) (ed,43) (ee,15) (f0,26) (f1,70) (f1,35) (f1,11) (f3,18) (f3,19) (f7,71) (f8,25) (f8,94) (ff,96) 
__ShowPrefixTree -> 5a 29 10 04 00 00 * * 04 * * 08 04 * * 0c 0b * 0b * * 0d * * 1d 13 12 11 * * * 1b 19 * * 1d * * 25 25 1e * * * 27 25 * * 28 * * 41 3a 33 2e 2c * * 2f * * 36 33 * * * 3f 3e 3e 3b * * * 3e * 3e * * 40 3f * 3f * * 40 * * 48 43 43 42 * * * 46 * 47 * * 4e 4b * * 57 54 53 * * 54 * * 58 * * 91 74 69 67 65 5e * * 67 * * 69 68 * * * 6d 6c 6c * * 6d * * 70 6d 6d * * 6d 6d * * 6e * * 70 * * 85 82 7b 78 75 * * 7b * * 7c 7b * * * 84 * 84 * * 8d 87 86 85 * * * 89 * * 8d 8d * * 8f * * c8 a0 99 98 95 95 * * 98 * * 98 * * 9b 9a * * 9b * * b2 ae a5 * ad * * b1 af * * * c3 bb b6 * ba * * bc bb * * bd * * c4 c3 * * c5 * * db d7 cf ca * * d6 d2 * * * d9 d7 * d8 * * d9 * * ee e6 e2 de dc dc * * dd * * e0 * * e5 e3 * * e5 * * ed e8 e7 e7 * * e7 * * e8 * * ed * * f1 f1 f0 * * f1 * * f8 f7 f3 * f3 * * f8 * * ff * * 
EraseNodesFromEnd(pTree) ...
ShowTree -> IsEmptyTree(pTree) : 1, SizeOfTree(pTree) : 0

InsertInRandomOrder(pTree, 80) ...
ShowTree -> IsEmptyTree(pTree) : 0, SizeOfTree(pTree) : 80
(0a,61) (0b,31) (0d,50) (11,13) (14,77) (18,41) (1d,02) (20,71) (23,08) (26,09) (2a,73) (2f,33) (32,37) (33,45) (35,04) (4b,15) (4e,03) (53,53) (55,74) (55,86) (57,55) (58,18) (59,76) (5a,90) (5a,08) (5b,61) (5b,71) (5c,43) (5d,15) (5d,74) (5e,33) (60,78) (68,85) (68,82) (6a,56) (6b,30) (6c,71) (71,16) (72,62) (73,28) (74,17) (74,82) (75,09) (76,82) (77,51) (80,16) (82,93) (87,30) (8c,08) (8d,15) (8f,10) (98,17) (a0,03) (a2,85) (a4,36) (a9,78) (ac,02) (ae,23) (b0,48) (b1,25) (b5,37) (b8,21) (c5,58) (c6,80) (d4,56) (d5,14) (d5,22) (d7,68) (d9,67) (da,50) (db,37) (dc,00) (df,12) (e1,98) (e6,84) (e9,89) (e9,59) (f8,79) (fa,03) (fc,36) 
EraseSequenceInTree(pTree,NextInTree(BeginOfTree(pTree)),PreviousInTree(EndOfTree(pTree))) ...
ShowTree -> IsEmptyTree(pTree) : 0, SizeOfTree(pTree) : 2
(0a,61) (fc,36) 
EraseSequenceInTree(pTree, BeginOfTree(pTree), EndOfTree(pTree)) ...
ShowTree -> IsEmptyTree(pTree) : 1, SizeOfTree(pTree) : 0

InsertInRandomOrder(pTree, 800) ...
ShowTree -> IsEmptyTree(pTree) : 0, SizeOfTree(pTree) : 800
(00,82) (00,78) (01,08) (01,15) (01,48) (02,76) (02,12) (02,43) (02,29) (03,02) (03,49) (03,77) (04,90) (04,91) (05,33) (05,40) (05,05) (05,51) (06,14) (06,97) (06,05) (07,89) (07,95) (08,95) (08,78) (08,26) (09,58) (09,85) (09,86) (09,93) (09,38) (09,37) (0a,98) (0a,71) (0a,19) (0b,56) (0b,60) (0c,67) (0d,64) (0e,43) (0f,75) (0f,70) (0f,93) (0f,25) (0f,34) (10,51) (10,55) (10,15) (11,38) (11,60) (12,23) (12,02) (12,96) (12,10) (12,39) (12,91) (13,08) (13,84) (13,80) (13,61) (13,38) (14,37) (14,11) (14,19) (15,72) (15,01) (16,22) (17,42) (17,23) (18,61) (18,62) (18,35) (18,34) (19,01) (19,21) (19,62) (1a,05) (1a,77) (1a,89) (1a,76) (1b,16) (1b,06) (1c,69) (1c,15) (1c,87) (1d,58) (1d,47) (1d,06) (1d,36) (1d,87) (1e,28) (1e,73) (1f,72) (1f,66) (20,66) (20,40) (20,18) (21,38) (21,81) (21,26) (22,61) (22,08) (22,79) (22,51) (23,47) (24,47) (24,81) (25,22) (25,55) (25,23) (25,99) (26,42) (26,55) (26,60) (26,65) (26,89) (27,36) (27,41) (27,56) (28,64) (28,72) (28,96) (28,35) (28,18) (29,14) (29,73) (2a,22) (2a,70) (2b,62) (2b,13) (2b,16) (2b,02) (2c,90) (2c,97) (2c,58) (2c,40) (2d,96) (2d,78) (2e,19) (2e,01) (2e,63) (2e,85) (2e,38) (2e,02) (2f,95) (2f,26) (2f,68) (2f,65) (2f,95) (2f,80) (2f,45) (30,34) (30,74) (30,58) (30,90) (31,64) (31,52) (31,53) (31,33) (32,26) (32,31) (32,17) (32,63) (32,93) (33,17) (33,94) (33,41) (33,39) (34,33) (35,70) (35,87) (35,05) (35,90) (36,21) (36,89) (36,83) (36,37) (37,38) (37,18) (37,80) (37,94) (37,69) (39,72) (39,20) (39,41) (3a,85) (3a,44) (3a,22) (3a,10) (3a,76) (3b,83) (3b,70) (3c,49) (3c,11) (3c,33) (3d,30) (3d,05) (3d,73) (3d,52) (3d,13) (3d,54) (3d,96) (3e,18) (3e,77) (3e,71) (3e,98) (3f,52) (3f,64) (3f,08) (3f,50) (3f,52) (3f,68) (40,54) (40,76) (40,69) (40,00) (40,85) (41,19) (41,01) (41,18) (41,89) (41,71) (42,88) (42,04) (42,69) (42,58) (43,19) (43,93) (44,23) (46,99) (47,59) (47,70) (47,58) (47,24) (48,83) (48,98) (48,40) (49,21) (49,55) (4a,47) (4a,43) (4a,49) (4a,89) (4b,10) (4b,86) (4c,98) (4d,61) (4d,17) (4d,40) (4e,66) (4e,82) (4e,50) (4f,08) (4f,37) (4f,21) (4f,53) (50,10) (50,89) (50,01) (51,34) (51,11) (51,22) (52,85) (54,02) (54,81) (54,73) (55,47) (55,22) (55,85) (55,30) (55,94) (56,77) (56,78) (57,98) (57,79) (57,49) (57,15) (57,69) (58,84) (58,61) (59,57) (59,56) (59,56) (59,51) (5a,63) (5a,68) (5a,52) (5b,21) (5b,14) (5c,95) (5c,51) (5c,49) (5c,27) (5c,46) (5d,71) (5e,13) (5e,50) (5e,74) (5f,36) (5f,60) (5f,96) (5f,04) (60,40) (61,43) (61,40) (61,37) (61,34) (62,20) (62,74) (63,41) (63,71) (63,87) (64,53) (64,68) (64,15) (64,98) (64,23) (65,89) (65,90) (65,63) (65,72) (65,70) (66,94) (66,20) (66,98) (66,72) (67,28) (67,87) (67,52) (67,74) (68,81) (68,65) (68,36) (68,93) (68,37) (69,72) (69,44) (69,09) (69,36) (6a,14) (6a,33) (6b,67) (6b,95) (6c,19) (6c,91) (6d,93) (6e,31) (6e,77) (6e,22) (6e,24) (6e,61) (6e,03) (6f,56) (70,80) (70,79) (70,62) (70,63) (70,30) (71,38) (72,59) (72,50) (72,79) (72,04) (72,30) (73,20) (73,28) (73,85) (73,75) (74,56) (74,37) (74,25) (75,91) (75,16) (75,87) (75,87) (75,28) (76,60) (77,75) (77,37) (77,55) (77,93) (77,50) (78,58) (79,59) (79,24) (79,78) (7c,54) (7d,76) (7d,90) (7d,41) (7d,00) (7e,24) (7e,40) (7e,02) (7f,49) (80,72) (80,67) (80,46) (81,38) (81,04) (82,07) (82,53) (82,09) (82,25) (83,43) (83,90) (83,45) (83,45) (83,25) (84,74) (84,83) (84,82) (84,86) (85,45) (85,79) (85,37) (86,71) (86,05) (87,82) (87,04) (87,47) (87,03) (87,05) (87,81) (88,42) (88,16) (89,90) (89,58) (89,26) (8a,51) (8a,38) (8b,06) (8b,74) (8b,05) (8b,43) (8b,01) (8b,48) (8c,68) (8c,55) (8c,79) (8c,71) (8c,59) (8d,93) (8e,21) (8e,29) (8e,62) (8e,88) (8e,24) (8f,28) (8f,46) (90,31) (90,31) (90,79) (91,68) (92,28) (92,44) (93,88) (93,38) (94,49) (94,59) (94,75) (95,29) (95,10) (95,75) (96,68) (96,88) (96,67) (97,18) (97,25) (97,92) (98,87) (99,78) (9a,20) (9a,91) (9b,98) (9c,60) (9d,83) (9d,62) (9d,18) (9e,37) (9e,71) (9e,87) (9e,77) (9f,81) (9f,89) (9f,82) (9f,16) (9f,31) (a0,16) (a0,52) (a1,16) (a1,07) (a2,39) (a2,72) (a2,92) (a2,51) (a3,84) (a3,74) (a3,97) (a3,82) (a3,40) (a3,31) (a6,49) (a6,58) (a6,74) (a6,76) (a6,56) (a7,97) (a7,87) (a7,93) (a7,77) (a8,30) (a8,05) (a8,50) (a9,08) (a9,65) (a9,43) (a9,21) (a9,64) (aa,75) (aa,56) (aa,08) (aa,19) (aa,53) (ab,60) (ab,90) (ad,52) (ad,43) (ae,69) (ae,76) (ae,12) (ae,83) (af,68) (af,67) (af,99) (af,69) (af,76) (af,26) (b0,09) (b0,47) (b0,35) (b0,69) (b0,98) (b1,24) (b1,81) (b1,50) (b1,98) (b1,99) (b3,50) (b3,60) (b3,78) (b3,16) (b3,88) (b3,35) (b4,01) (b4,78) (b5,54) (b5,02) (b5,78) (b6,92) (b6,74) (b6,66) (b6,78) (b6,88) (b7,59) (b7,45) (b8,20) (b8,23) (b9,84) (b9,28) (b9,13) (b9,03) (ba,41) (ba,79) (bc,60) (bc,78) (bc,58) (bd,05) (bd,06) (bd,31) (bd,55) (be,45) (be,64) (be,43) (be,72) (bf,02) (bf,91) (bf,99) (bf,26) (bf,83) (bf,02) (bf,52) (bf,04) (c0,28) (c0,75) (c2,49) (c2,79) (c3,21) (c3,58) (c3,55) (c3,45) (c4,36) (c4,09) (c4,77) (c4,02) (c4,25) (c5,52) (c5,22) (c5,15) (c5,18) (c5,97) (c5,34) (c6,18) (c6,62) (c7,10) (c7,96) (c7,89) (c7,87) (c7,66) (c8,87) (c8,80) (c8,75) (c8,09) (c9,37) (c9,52) (ca,09) (ca,80) (ca,80) (ca,62) (ca,28) (cb,77) (cb,45) (cb,35) (cc,62) (cc,03) (cc,23) (cc,30) (cd,93) (cd,96) (cd,73) (cd,40) (cd,80) (ce,93) (ce,07) (ce,07) (ce,69) (cf,11) (cf,90) (d0,37) (d0,22) (d1,18) (d1,61) (d1,33) (d1,03) (d2,13) (d2,48) (d2,22) (d2,77) (d2,42) (d3,69) (d3,80) (d3,69) (d4,14) (d4,63) (d5,26) (d5,30) (d6,66) (d6,84) (d6,83) (d6,08) (d7,61) (d7,69) (d7,61) (d7,93) (d8,37) (d8,34) (d8,53) (d8,55) (d8,27) (d9,89) (d9,91) (d9,97) (d9,80) (d9,83) (d9,83) (d9,46) (da,15) (da,72) (da,40) (da,27) (db,15) (dc,52) (dc,74) (dd,18) (dd,24) (de,14) (de,41) (df,62) (df,15) (e0,54) (e0,82) (e0,77) (e0,84) (e1,20) (e1,65) (e1,81) (e1,47) (e2,07) (e2,10) (e2,77) (e2,08) (e3,48) (e3,50) (e4,12) (e4,75) (e4,64) (e5,20) (e5,91) (e5,93) (e5,75) (e6,71) (e6,21) (e6,97) (e7,96) (e7,26) (e8,59) (e8,17) (e9,40) (e9,31) (e9,47) (e9,52) (ea,44) (ea,35) (ea,50) (ea,61) (eb,65) (eb,29) (eb,79) (ec,18) (ec,14) (ec,93) (ed,35) (ed,78) (ed,21) (ed,30) (ed,63) (ed,72) (ed,34) (ee,59) (ef,22) (ef,26) (ef,41) (f1,12) (f1,37) (f2,86) (f2,08) (f2,81) (f2,28) (f2,50) (f2,95) (f3,81) (f3,94) (f3,89) (f3,22) (f3,60) (f4,36) (f4,72) (f4,07) (f4,18) (f4,39) (f5,92) (f6,46) (f6,96) (f7,08) (f7,69) (f7,90) (f8,91) (f8,57) (f9,26) (fa,62) (fa,17) (fb,16) (fb,68) (fb,25) (fb,52) (fc,40) (fc,53) (fc,31) (fc,72) (fc,92) (fd,25) (fd,83) (fd,01) (fe,93) (fe,47) (fe,55) (ff,97) (ff,20) (ff,43) (ff,35) 
Erased for key 00000000 :   2 	Erased for key 00000001 :   3 	Erased for key 00000002 :   4 	Erased for key 00000003 :   3 	Erased for key 00000004 :   2 	Erased for key 00000005 :   4 	Erased for key 00000006 :   3 	Erased for key 00000007 :   2 	Erased for key 00000008 :   3 	Erased for key 00000009 :   6 	Erased for key 0000000A :   3 	Erased for key 0000000B :   2 	Erased for key 0000000C :   1 	Erased for key 0000000D :   1 	Erased for key 0000000E :   1 	Erased for key 0000000F :   5 	Erased for key 00000010 :   3 	Erased for key 00000011 :   2 	Erased for key 00000012 :   6 	Erased for key 00000013 :   5 	Erased for key 00000014 :   3 	Erased for key 00000015 :   2 	Erased for key 00000016 :   1 	Erased for key 00000017 :   2 	Erased for key 00000018 :   4 	Erased for key 00000019 :   3 	Erased for key 0000001A :   4 	Erased for key 0000001B :   2 	Erased for key 0000001C :   3 	Erased for key 0000001D :   5 	Erased for key 0000001E :   2 	Erased for key 0000001F :   2 	Erased for key 00000020 :   3 	Erased for key 00000021 :   3 	Erased for key 00000022 :   4 	Erased for key 00000023 :   1 	Erased for key 00000024 :   2 	Erased for key 00000025 :   4 	Erased for key 00000026 :   5 	Erased for key 00000027 :   3 	Erased for key 00000028 :   5 	Erased for key 00000029 :   2 	Erased for key 0000002A :   2 	Erased for key 0000002B :   4 	Erased for key 0000002C :   4 	Erased for key 0000002D :   2 	Erased for key 0000002E :   6 	Erased for key 0000002F :   7 	Erased for key 00000030 :   4 	Erased for key 00000031 :   4 	Erased for key 00000032 :   5 	Erased for key 00000033 :   4 	Erased for key 00000034 :   1 	Erased for key 00000035 :   4 	Erased for key 00000036 :   4 	Erased for key 00000037 :   5 	Erased for key 00000038 :   0 	Erased for key 00000039 :   3 	Erased for key 0000003A :   5 	Erased for key 0000003B :   2 	Erased for key 0000003C :   3 	Erased for key 0000003D :   7 	Erased for key 0000003E :   4 	Erased for key 0000003F :   6 	Erased for key 00000040 :   5 	Erased for key 00000041 :   5 	Erased for key 00000042 :   4 	Erased for key 00000043 :   2 	Erased for key 00000044 :   1 	Erased for key 00000045 :   0 	Erased for key 00000046 :   1 	Erased for key 00000047 :   4 	Erased for key 00000048 :   3 	Erased for key 00000049 :   2 	Erased for key 0000004A :   4 	Erased for key 0000004B :   2 	Erased for key 0000004C :   1 	Erased for key 0000004D :   3 	Erased for key 0000004E :   3 	Erased for key 0000004F :   4 	Erased for key 00000050 :   3 	Erased for key 00000051 :   3 	Erased for key 00000052 :   1 	Erased for key 00000053 :   0 	Erased for key 00000054 :   3 	Erased for key 00000055 :   5 	Erased for key 00000056 :   2 	Erased for key 00000057 :   5 	Erased for key 00000058 :   2 	Erased for key 00000059 :   4 	Erased for key 0000005A :   3 	Erased for key 0000005B :   2 	Erased for key 0000005C :   5 	Erased for key 0000005D :   1 	Erased for key 0000005E :   3 	Erased for key 0000005F :   4 	Erased for key 00000060 :   1 	Erased for key 00000061 :   4 	Erased for key 00000062 :   2 	Erased for key 00000063 :   3 	Erased for key 00000064 :   5 	Erased for key 00000065 :   5 	Erased for key 00000066 :   4 	Erased for key 00000067 :   4 	Erased for key 00000068 :   5 	Erased for key 00000069 :   4 	Erased for key 0000006A :   2 	Erased for key 0000006B :   2 	Erased for key 0000006C :   2 	Erased for key 0000006D :   1 	Erased for key 0000006E :   6 	Erased for key 0000006F :   1 	Erased for key 00000070 :   5 	Erased for key 00000071 :   1 	Erased for key 00000072 :   5 	Erased for key 00000073 :   4 	Erased for key 00000074 :   3 	Erased for key 00000075 :   5 	Erased for key 00000076 :   1 	Erased for key 00000077 :   5 	Erased for key 00000078 :   1 	Erased for key 00000079 :   3 	Erased for key 0000007A :   0 	Erased for key 0000007B :   0 	Erased for key 0000007C :   1 	Erased for key 0000007D :   4 	Erased for key 0000007E :   3 	Erased for key 0000007F :   1 	Erased for key 00000080 :   3 	Erased for key 00000081 :   2 	Erased for key 00000082 :   4 	Erased for key 00000083 :   5 	Erased for key 00000084 :   4 	Erased for key 00000085 :   3 	Erased for key 00000086 :   2 	Erased for key 00000087 :   6 	Erased for key 00000088 :   2 	Erased for key 00000089 :   3 	Erased for key 0000008A :   2 	Erased for key 0000008B :   6 	Erased for key 0000008C :   5 	Erased for key 0000008D :   1 	Erased for key 0000008E :   5 	Erased for key 0000008F :   2 	Erased for key 00000090 :   3 	Erased for key 00000091 :   1 	Erased for key 00000092 :   2 	Erased for key 00000093 :   2 	Erased for key 00000094 :   3 	Erased for key 00000095 :   3 	Erased for key 00000096 :   3 	Erased for key 00000097 :   3 	Erased for key 00000098 :   1 	Erased for key 00000099 :   1 	Erased for key 0000009A :   2 	Erased for key 0000009B :   1 	Erased for key 0000009C :   1 	Erased for key 0000009D :   3 	Erased for key 0000009E :   4 	Erased for key 0000009F :   5 	Erased for key 000000A0 :   2 	Erased for key 000000A1 :   2 	Erased for key 000000A2 :   4 	Erased for key 000000A3 :   6 	Erased for key 000000A4 :   0 	Erased for key 000000A5 :   0 	Erased for key 000000A6 :   5 	Erased for key 000000A7 :   4 	Erased for key 000000A8 :   3 	Erased for key 000000A9 :   5 	Erased for key 000000AA :   5 	Erased for key 000000AB :   2 	Erased for key 000000AC :   0 	Erased for key 000000AD :   2 	Erased for key 000000AE :   4 	Erased for key 000000AF :   6 	Erased for key 000000B0 :   5 	Erased for key 000000B1 :   5 	Erased for key 000000B2 :   0 	Erased for key 000000B3 :   6 	Erased for key 000000B4 :   2 	Erased for key 000000B5 :   3 	Erased for key 000000B6 :   5 	Erased for key 000000B7 :   2 	Erased for key 000000B8 :   2 	Erased for key 000000B9 :   4 	Erased for key 000000BA :   2 	Erased for key 000000BB :   0 	Erased for key 000000BC :   3 	Erased for key 000000BD :   4 	Erased for key 000000BE :   4 	Erased for key 000000BF :   8 	Erased for key 000000C0 :   2 	Erased for key 000000C1 :   0 	Erased for key 000000C2 :   2 	Erased for key 000000C3 :   4 	Erased for key 000000C4 :   5 	Erased for key 000000C5 :   6 	Erased for key 000000C6 :   2 	Erased for key 000000C7 :   5 	Erased for key 000000C8 :   4 	Erased for key 000000C9 :   2 	Erased for key 000000CA :   5 	Erased for key 000000CB :   3 	Erased for key 000000CC :   4 	Erased for key 000000CD :   5 	Erased for key 000000CE :   4 	Erased for key 000000CF :   2 	Erased for key 000000D0 :   2 	Erased for key 000000D1 :   4 	Erased for key 000000D2 :   5 	Erased for key 000000D3 :   3 	Erased for key 000000D4 :   2 	Erased for key 000000D5 :   2 	Erased for key 000000D6 :   4 	Erased for key 000000D7 :   4 	Erased for key 000000D8 :   5 	Erased for key 000000D9 :   7 	Erased for key 000000DA :   4 	Erased for key 000000DB :   1 	Erased for key 000000DC :   2 	Erased for key 000000DD :   2 	Erased for key 000000DE :   2 	Erased for key 000000DF :   2 	Erased for key 000000E0 :   4 	Erased for key 000000E1 :   4 	Erased for key 000000E2 :   4 	Erased for key 000000E3 :   2 	Erased for key 000000E4 :   3 	Erased for key 000000E5 :   4 	Erased for key 000000E6 :   3 	Erased for key 000000E7 :   2 	Erased for key 000000E8 :   2 	Erased for key 000000E9 :   4 	Erased for key 000000EA :   4 	Erased for key 000000EB :   3 	Erased for key 000000EC :   3 	Erased for key 000000ED :   7 	Erased for key 000000EE :   1 	Erased for key 000000EF :   3 	Erased for key 000000F0 :   0 	Erased for key 000000F1 :   2 	Erased for key 000000F2 :   6 	Erased for key 000000F3 :   5 	Erased for key 000000F4 :   5 	Erased for key 000000F5 :   1 	Erased for key 000000F6 :   2 	Erased for key 000000F7 :   3 	Erased for key 000000F8 :   2 	Erased for key 000000F9 :   1 	Erased for key 000000FA :   2 	Erased for key 000000FB :   4 	Erased for key 000000FC :   5 	Erased for key 000000FD :   3 	Erased for key 000000FE :   3 	Erased for key 000000FF :   4 	EraseFromKeys(pTree,0,MAX_KEY) ...
ShowTree -> IsEmptyTree(pTree) : 1, SizeOfTree(pTree) : 0


!!!BYE!!!